// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package dedicatediface provides an interface to enable mocking the dedicated service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package dedicatediface

import (
	"github.com/KscSDK/ksc-sdk-go/service/dedicated"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

// DedicatedAPI provides an interface to enable mocking the
// dedicated.Dedicated service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // dedicated.
//    func myFunc(svc dedicatediface.DedicatedAPI) bool {
//        // Make svc.CreateDedicatedCluster request
//    }
//
//    func main() {
//        sess := session.New()
//        svc := dedicated.New(sess)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockDedicatedClient struct {
//        dedicatediface.DedicatedAPI
//    }
//    func (m *mockDedicatedClient) CreateDedicatedCluster(input *map[string]interface{}) (*map[string]interface{}, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockDedicatedClient{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type DedicatedAPI interface {
	CreateDedicatedCluster(*map[string]interface{}) (*map[string]interface{}, error)
	CreateDedicatedClusterWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	CreateDedicatedClusterRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	CreateDedicatedHosts(*map[string]interface{}) (*map[string]interface{}, error)
	CreateDedicatedHostsWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	CreateDedicatedHostsRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DeleteDedicatedCluster(*map[string]interface{}) (*map[string]interface{}, error)
	DeleteDedicatedClusterWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DeleteDedicatedClusterRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DeleteDedicatedHost(*map[string]interface{}) (*map[string]interface{}, error)
	DeleteDedicatedHostWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DeleteDedicatedHostRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DescribeDedicatedCluster(*map[string]interface{}) (*map[string]interface{}, error)
	DescribeDedicatedClusterWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DescribeDedicatedClusterRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	DescribeDedicatedHosts(*map[string]interface{}) (*map[string]interface{}, error)
	DescribeDedicatedHostsWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	DescribeDedicatedHostsRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	HostMigrate(*map[string]interface{}) (*map[string]interface{}, error)
	HostMigrateWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	HostMigrateRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	InstanceMigrate(*map[string]interface{}) (*map[string]interface{}, error)
	InstanceMigrateWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	InstanceMigrateRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	ModifyDedicatedClusterName(*map[string]interface{}) (*map[string]interface{}, error)
	ModifyDedicatedClusterNameWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	ModifyDedicatedClusterNameRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	RenameDedicatedHost(*map[string]interface{}) (*map[string]interface{}, error)
	RenameDedicatedHostWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	RenameDedicatedHostRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	RunInstances(*map[string]interface{}) (*map[string]interface{}, error)
	RunInstancesWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	RunInstancesRequest(*map[string]interface{}) (*request.Request, *map[string]interface{})

	SetvCPU(*map[string]interface{}) (*map[string]interface{}, error)
	SetvCPUWithContext(aws.Context, *map[string]interface{}, ...request.Option) (*map[string]interface{}, error)
	SetvCPURequest(*map[string]interface{}) (*request.Request, *map[string]interface{})
}

var _ DedicatedAPI = (*dedicated.Dedicated)(nil)
